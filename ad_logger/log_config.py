import config.ad_config as ad_config

if ad_config.TESTING:
    LOG_FLAGS = {
        "demultiplex": {
            "info": "demultiplex_info",
            "fail": "demultiplex_fail",
            "success": "demultiplex_success",
            "ss_warning": "samplesheet_warning",
            },
        "usw": {
            "info": "usw_info",
            "fail": "usw_fail",
            "success": "usw_success",
            },
        "email": {
            "info": "email_info",
            "fail": "email_fail",
            "success": "email_success",
            },
        "backup_runfolder": {
            "info": "backuprunfolder_info",
            "fail": "backuprunfolder_fail",
            "success": "backuprunfolder_success",
        }
    }
else:
    LOG_FLAGS = {
        "demultiplex": {
            "info": "demultiplextest_info",
            "fail": "demultiplextest_fail",
            "success": "demultiplextest_success",
            "ss_warning": "testsamplesheet_warning",
            },
        "usw": {
            "info": "uswtest_info",
            "fail": "uswtest_fail",
            "success": "uswtest_success",
            },
        "email": {
            "info": "emailtest_info",
            "fail": "emailtest_fail",
            "success": "emailtest_success",
            },
        "backup_runfolder": {
            "info": "backuprunfoldertest_info",
            "fail": "backuprunfoldertest_fail",
            "success": "backuprunfoldertest_success",
        }
    }

LOG_MSGS = {
    "demultiplex": {
        "script_start": (
            "Automate demultiplex release: %s . "
            "Start of demultiplex.py script"
            ),
        "demux_script_end": (
            "Automate demultiplex release %s: Demultiplex.py complete. %s "
            "runfolders processed: %s"
        ),
        "runfolder_processed": "Runfolder has been processed: %s",
        "rename_demuxlog_success": (
            "Demultiplex logfile successfully renamed with "
            "runfolder names. New name: %s"
        ),
        "rename_demuxlog_pass": (
            "Demultiplex logfile renamed successfully for file %s to %s"
        ),
        "rename_demuxlog_fail": (
            "Demultiplex logfile rename failed for file %s with exception: %s"
        ),
        "demultiplexing_required": (
            "Demultiplexing is required for this runfolder"
        ),
        "processing_complete": ("Processing is complete for this runfolder"),
        "demux_runfolder_start": (
            "Automate_demultiplex release: %s -------------- Assessing %s"
        ),
        "ic_fail": (
            "DEMUX_FAIL - Integrity check fail. Checksums do not match for "
            "%s see %s"
        ),
        "bcl2fastq_start": (
            "Demultiplexing started for run %s using bcl2fastq command: %s"
        ),
        "bcl2fastq_complete": "bcl2fastq subprocess complete for run %s",
        "bcl2fastq_failed": "DEMUX_FAIL - bcl2fastq subprocess failed for run %s",
        "demux_already_complete": (
            "Demultiplexing already completed - "
            "bcl2fastq log found @ %s --- STOP ---"
        ),
        "demux_not_complete": (
            "Demultiplexing not yet completed - no demultiplex "
            "log found @ %s --- CONTINUE ---"
        ),
        "sschecks_not_passed": "Samplesheet did not pass checks %s: %s",
        "sschecks_passed": "Samplesheet passed all checks %s",
        "run_finished": "Run finished - RTAComplete.txt found @ %s",
        "run_incomplete": (
            "Sequencing not yet complete (RTAComplete.txt "
            "file absent) @ %s --- STOP ---"
        ),
        "bcl2fastq_test_fail": "DEMUX_FAIL - BCL2FastQ installation test failed",
        "bcl2fastq_test_pass": "BCL2FastQ installation test passed",
        "ssfail_haltdemux": (
            "DEMUX_FAIL - Demultiplexing halted due to samplesheet errors %s: %s"
        ),
        "ic_required": (
            "This run was sequenced on a sequencer that requires integrity "
            "checking"
        ),
        "ic_notrequired": "Integrity check not required",
        "csumfile_present": (
            "Checksums file present - checksums have been "
            "generated by integrity check scripts"
        ),
        "csumfile_absent": (
            "Demultiplexing halted: Integrity check not yet performed on "
            "sequencer (checksum file absent)"
        ),
        "checksums_checked": "Checksums already checked for this run",
        "checksums_notchecked": "Checksums not yet checked for this run",
        "ic_start": "Data integrity checks starting...",
        "ic_pass": "Integrity check for runfolder %s passed",
        "create_bcl2fastqlog_pass": "Created bcl2fastq logfile for run %s",
        "create_bcl2fastqlog_fail": (
            "DEMUX_FAIL - Failed to create bcl2fastq logfile for run %s. "
            "Exception: %s"
        ),
        "TSO500_run": f"%s is a {ad_config.DEMULTIPLEXLOG_TSO500MSG}",
        "write_TSO_msg_to_bcl2fastqlog": (
            "TSO500 message successfully written to "
            "bcl2fastq2_output.log file for TSO run: %s"
        ),
        "subprocess_success": (
            "Subprocess successful for command %s with exit code %s"
        ),
        "subprocess_fail": (
            "DEMUX_FAIL - Subprocess failed for command %s with exit code %s"
        ),
        "demux_complete": "Demultiplexing completed successfully for run %s",
        "demux_error": (
            "DEMUX_FAIL - DEMULTIPLEXING UNSUCCESSFUL (BCL2FastQ2 ERROR) "
            "- Demultiplexing failed for run %s. Please see logfile %s"
        ),
        "bcl2fastqlog_empty": (
            "DEMUX_FAIL - BCL2FASTQ2 logfile is empty for run %s. "
            "Please see logfile %s"
        ),
        "bcl2fastqlog_absent": (
            "DEMUX_FAIL - BCL2FASTQ2 logfile does not exist for "
            "run %s. Please see logfile "
        ),
        "running_cd": (
            "Running the following command for cluster density calculation: %s"
        ),
        "cd_success": (
            "Cluster density calculation saved to "
            f"%s{ad_config.CLUSTER_DENSITY_FILE_SUFFIX}"
        ),
        "cd_fail": (
            "DEMUX_FAIL - Cluster density calculation failed for : %s. "
            "Error: %s"
            ),
    },
    "usw": {
        "script_start": (
            "Automate demultiplex release: %s . "
            "Start of upload_and_setoff_workflows.py script"
            ),
        "runfolder_identified": (
            "Identified runfolder: %s",
        ),
        "runfolder_looping": (
            "Looping through runfolders: %s",
        ),
        "runfolder_processed": (
            "Runfolder has been processed: %s",
        ),
        "runfolder_not_processed": (
            "Runfolder not processed: %s",
        ),
        "script_complete": (
            "Automate demultiplex release %s: Demultiplex.py complete. %s "
            "runfolders processed: %s",
        ),
        "testing_software": (
            "automate_demultiplexing release: %s",
        ),
        "dxtoolkittest_pass": (
            "dx toolkit source command successful. Stdout: %s",
        ),
        "dxtoolkittest_fail": (
            "USW_FAIL - dx toolkit source command failed. Stdout: %s. "
            "Stderr: %s"
        ),
        "TSO_backup_attempt": "Attempting to backup TSO runfolder. Attempt %s",
        "runfolder_prev_proc": "Runfolder previously processed: %s. Skipping.",
        "uatest_fail": (
            "USW_FAIL - Upload Agent Test Failed. Stdout: %s. Stderr: %s"
            ),
        "uatest_pass": "Upload Agent function test passed. Stdout: %s",
        "ua_file_present": "Upload started file present. Terminating.",
        "ua_file_absent": "Upload started file not found. Continuing.",
        "tso_run": "TSO500 run detected.",
        "demux_complete": "Demultiplex completed succesfully.",
        "demux_failed": "Demultiplex failed.",
        "not_yet_demultiplexed": "Demultiplex has not been performed.",
        "fastq_identified": "Fastq identified: %s",
        "recognised_pannos": "Fastq contains recognised pan number: %s, %s",
        "unrecognised_panno": (
            "USW_FAIL - Fastq does not contain a recognised pan number: %s"
            ),
        "fastqs_identified": (
            "Identified %s total samples to process, and %s "
            "samples not to process",
            ),
        "no_fastqs_with_pannos": (
            "USW_FAIL - No fastqs in runfolder contained identifiable "
            "pan numbers",
            ),
        "library_batch_no_err": (
            "USW_FAIL '%s - Unable to identify library batch numbers. Check "
            "for underscores in the samplenames.",
            ),
        "creating_proj": (
            "Executing project creation script: %s"
            ),
        "proj_created": (
            "DNAnexus project %s (%s) created and shared (%s) to %s",
            ),
        "proj_creation_fail": (
            "USW_FAIL - failed to create project in dna nexus for %s"
            ),
        "fastq_upload_cmds": "Fastq upload commands:\n%s",
        "uploading_fastqs": "Uploading fastqs. See commands at %s",
        "fastq_upload_output": "Fastq upload.\nStdout:\n%sStderr:\n%s\n",
        "upload_fail": (
            "USW_FAIL - upload of %s files failed for run %s. Files: %s"
            ),
        "upload_success": "Upload of files complete for run %s",
        "cd_upload_cmds": "Upload cluster density commands:\n%s",
        "uploading_cd_files": (
            "Uploading cluster density files. See commands at %s"
            ),
        "cd_upload_output": "Uploading cluster density files\n%s\n%s",
        "cd_files_absent": (
            "Skipping upload of cluster density files - not all files present"
            ),
        "bcl2fastq_upload_cmds": "Upload bcl2fastq stats file commands:\n%s",
        "uploading_bcl2fastq_files": (
            "Uploading bcl2fastq stats files. See commands at %s"
            ),
        "bcl2fastq_upload_output": "Uploading bcl2fastq stats files\n%s\n%s",
        "bcl2fastq_files_absent": (
            "Skipping upload of bcl2fastq stats files - not all files present"
            ),
        "building_cmds": "Building dx run commands",
        "sample": "Identified %s sample",
        "congenica_upload_required": (
            "Samples in project %s require upload to congenica"
            ),
        "cmds_built": "Finished building dx run commands",
        "building_cmd": "Building %s cmd for %s",
        "reference_sample": (
            "NA12878 sample detected, not building congenica upload command "
            "for %s"
            ),
        "writing_cmds": "Writing dx run commands",
        "running_cmds": "Running dx run commands",
        "dx_run_err": (
            "USW_FAIL - Error when setting off dx run command for run %s. "
            "Command: %s. Stderror = \n%s"
            ),
        "dx_run_success": "dx run commands issued without error for run %s",
        "ss_copy_success": "Samplesheet copied to runfolder: %s",
        "ss_copy_fail": "Samplesheet not copied to runfolder",
        "uploading_rf": (
            "Uploading rest of run folder to Nexus using backup_runfolder, "
            "ignoring: %s. Stdout stored in logfile: %s"
            ),
        "uploading_logs": (
            "Uploading logfiles (this will not be included in DNANexus)"
            ),
        "uploading_log": "Uploading logfile: %s using cmd %s",
        "upload_rf_fail": (
            "USW_FAIL - Error in upload of rest of runfolder: %s in "
            "runfolder %s"
            ),
        "upload_rf_success": "Rest of runfolder %s uploaded ok",
    },
}
