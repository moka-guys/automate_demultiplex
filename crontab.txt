# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
0 * * * * python /home/mokaguys/Documents/apps/automate_demultiplex/demultiplex.py > /home/mokaguys/Documents/automate_demultiplexing_logfiles/Demultiplexing_stdout/$(date "+\%Y\%m\%d_\%H\%M\%S").txt 2>&1
5 * * * * python /home/mokaguys/Documents/apps/automate_demultiplex/DNANexus_upload_agent.py > /home/mokaguys/Documents/automate_demultiplexing_logfiles/Upload_agent_stdout/$(date "+\%Y\%m\%d_\%H\%M\%S").txt 2>&1
*/20 * * * * echo 'padam padam' 2>&1 | /usr/bin/logger -t Heartbeat
0 * * * * FREE=$(df /media/data1 --output=avail | tail -n 1 );FREEHR=$(df /media/data1 --output=avail -h | tail -n 1); if [ $FREE -lt 838860371 ]; then echo "Less than 800GB on data1 ("$FREEHR"B)"; fi | /usr/bin/logger -t data1_freespace

